### Divvy_Exercise_Full_Year_Analysis 2019 Q2 - 2020 Q1 ###
# This analysis is based on the Divvy case study and Data Visualization" 

# # # # # # # # # # # # # # # # # # # # # # # 
# Install required packages and load the packages below
# # # # # # # # # # # # # # # # # # # # # # #  

library(tidyverse)  
library(lubridate)  
library(ggplot2)    
library(zoo) 
library(timetk) 
library(gganimate) 
library(gifski) 
library(av)

#=====================
# STEP 1: COLLECT DATA
#=====================
# Upload Divvy datasets (csv files) here

q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file
## noted that 2020 and 2021 has different naming 
## 2020 data set does not have bikeid, tripduration, gender, birthyear but has additional coordinates of the bike geo location 

colnames(q3_2019)
colnames(q4_2019)
colnames(q2_2019)
colnames(q1_2020)  

# Rename columns to make them consistent with q1_2020 
(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))


(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time"  
                   ,ended_at = "01 - Rental Details Local End Time"  
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"))



# Convert ride_id and rideable_type to character so that they can stack correctly
q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 

# Stack individual quarter's data frames into one big data frame
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)

# Remove lat, long, birthyear, and gender fields as this data to be dropped beginning in 2020
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))

#======================================================
# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#======================================================
# Inspect the new table that has been created
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics

# There are a few problems we will need to fix:
## 1) The "member_casual" column has multiple labels for members and casual riders, and these need to be consolidated into two categories.
## 2) The data is currently too granular and needs to be aggregated at a higher level by adding additional columns such as day, month, and year.
## 3) A calculated field for the length of the ride is needed in all the data, as the "tripduration" column is not present in the 2020Q1 data.
## 4) Some rides have negative values in the "tripduration" column, and these need to be removed as they likely represent instances where bikes were taken out of circulation for quality control purposes.

# Reassign to the desired values with the current 2020 labels (Part 1)
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

# Check to make sure the proper number of observations were reassigned
table(all_trips$member_casual)

# Add columns that list the date, month, day, and year of each ride (part 2)
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level

all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd  
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Add a "ride_length" calculation to all_trips (in seconds)
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

# Inspect the structure of the columns
str(all_trips)

# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# We will create a new version of the dataframe (v2) since data is being removed

all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

# Notice that the days of the week are out of order. 
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))


#=====================================
# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
#=====================================
# Descriptive analysis on ride_length (all figures in seconds)

# Both members and casual users
cat("The value of average (total ride length / rides) is", mean(all_trips_v2$ride_length) , "s" , "\n")
cat("The value of midpoint ride lengths is", median(all_trips_v2$ride_length) , "s" ,"\n")
cat("The value of longest ride lengths is", max(all_trips_v2$ride_length) , "s" ,"\n")
cat("The value of shortest ride lengths is", min(all_trips_v2$ride_length) , "s" , "\n")


# You can condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)

# Comparing members and casual users using FUN application all data 
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# See the average ride time by each day for members vs casual users layering with day
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)


# see the average ride time by each day for members vs casual users  layering with week
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  
  group_by(member_casual, weekday) %>%                 
  summarise(number_of_rides = n()						          	
            ,average_duration = mean(ride_length)) %>% 		       
  arrange(member_casual, weekday)							         


# Let's visualize the number of rides by rider type
v1 <- all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides/1000, fill = member_casual)) +
  geom_col(position = "dodge") 

v1 + ggtitle("Plot of number of rides by rider type") +
xlab("Weekday") + ylab("numberof rides in Thousands(K)") +
labs(fill="Memeber Type")


# Let's create a visualization for average duration
v2 <- all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge") 

v2 + ggtitle("Plot of number of rides average_duration") +
  xlab("Weekday") + ylab("average_duration in Seconds(s)") +
  labs(fill="Memeber Type")

# Let's create a visualization for average duration
v2 <- all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge") 

v2 + ggtitle("Plot of number of rides average_duration") +
  xlab("Weekday") + ylab("average_duration in Seconds(s)") +
  labs(fill="Memeber Type")

# Let's create a visualization for average duration
all_trips_v3 <- all_trips_v2


v3 <- all_trips_v3 %>% 
  ggplot(aes(x = started_at, y = max(ride_length))) +
  geom_line() + 
  labs(x='Date',y ='Average Duration(s)', title ='Moving Average over a year' )+
  transition_reveal(started_at)+
  view_follow(fixed_y = TRUE)
  

animate(v3, nframes = 144, fps = 10, width = 800 , height = 500)
#=================================================
# STEP 5: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS
#=================================================
#save the visualisation 
ggsave(v1, file = "v1.png")
ggsave(v2, file = "v2.png")
anim_save('v3.gif' , v3)

